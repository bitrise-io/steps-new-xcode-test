// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	xcodecommand "github.com/bitrise-steplib/steps-xcode-test/xcodecommand"
	mock "github.com/stretchr/testify/mock"
)

// XcodeCommandRunner is an autogenerated mock type for the Runner type
type XcodeCommandRunner struct {
	mock.Mock
}

// Run provides a mock function with given fields: workDir, xcodebuildArgs, toolArgs
func (_m *XcodeCommandRunner) Run(workDir string, xcodebuildArgs []string, toolArgs []string) (xcodecommand.Output, error) {
	ret := _m.Called(workDir, xcodebuildArgs, toolArgs)

	var r0 xcodecommand.Output
	if rf, ok := ret.Get(0).(func(string, []string, []string) xcodecommand.Output); ok {
		r0 = rf(workDir, xcodebuildArgs, toolArgs)
	} else {
		r0 = ret.Get(0).(xcodecommand.Output)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, []string) error); ok {
		r1 = rf(workDir, xcodebuildArgs, toolArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewXcodeCommandRunner interface {
	mock.TestingT
	Cleanup(func())
}

// NewXcodeCommandRunner creates a new instance of XcodeCommandRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewXcodeCommandRunner(t mockConstructorTestingTNewXcodeCommandRunner) *XcodeCommandRunner {
	mock := &XcodeCommandRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
