// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	xcodebuild "github.com/bitrise-steplib/steps-xcode-test/xcodebuild"
	xcodecommand "github.com/bitrise-steplib/steps-xcode-test/xcodecommand"
	mock "github.com/stretchr/testify/mock"
)

// Xcodebuild is an autogenerated mock type for the Xcodebuild type
type Xcodebuild struct {
	mock.Mock
}

// GetXcodeCommadRunner provides a mock function with given fields:
func (_m *Xcodebuild) GetXcodeCommadRunner() xcodecommand.Runner {
	ret := _m.Called()

	var r0 xcodecommand.Runner
	if rf, ok := ret.Get(0).(func() xcodecommand.Runner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(xcodecommand.Runner)
		}
	}

	return r0
}

// RunTest provides a mock function with given fields: params
func (_m *Xcodebuild) RunTest(params xcodebuild.TestRunParams) (string, int, error) {
	ret := _m.Called(params)

	var r0 string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(xcodebuild.TestRunParams) (string, int, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(xcodebuild.TestRunParams) string); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(xcodebuild.TestRunParams) int); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(xcodebuild.TestRunParams) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetXcodeCommandRunner provides a mock function with given fields: runner
func (_m *Xcodebuild) SetXcodeCommandRunner(runner xcodecommand.Runner) {
	_m.Called(runner)
}

// NewXcodebuild creates a new instance of Xcodebuild. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXcodebuild(t interface {
	mock.TestingT
	Cleanup(func())
}) *Xcodebuild {
	mock := &Xcodebuild{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
