// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// SimulatorManager is an autogenerated mock type for the Manager type
type SimulatorManager struct {
	mock.Mock
}

// LaunchSimulator provides a mock function with given fields: simulatorID
func (_m *SimulatorManager) LaunchSimulator(simulatorID string) error {
	ret := _m.Called(simulatorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(simulatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetLaunchServices provides a mock function with given fields:
func (_m *SimulatorManager) ResetLaunchServices() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulatorBoot provides a mock function with given fields: id
func (_m *SimulatorManager) SimulatorBoot(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulatorCollectDiagnostics provides a mock function with given fields:
func (_m *SimulatorManager) SimulatorCollectDiagnostics() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulatorDiagnosticsName provides a mock function with given fields:
func (_m *SimulatorManager) SimulatorDiagnosticsName() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulatorEnableVerboseLog provides a mock function with given fields: id
func (_m *SimulatorManager) SimulatorEnableVerboseLog(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulatorShutdown provides a mock function with given fields: id
func (_m *SimulatorManager) SimulatorShutdown(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSimulatorManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewSimulatorManager creates a new instance of SimulatorManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSimulatorManager(t mockConstructorTestingTNewSimulatorManager) *SimulatorManager {
	mock := &SimulatorManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
