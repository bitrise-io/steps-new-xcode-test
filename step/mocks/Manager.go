// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	simulator "github.com/bitrise-steplib/steps-xcode-test/simulator"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GetLatestSimulatorAndVersion provides a mock function with given fields: osName, deviceName
func (_m *Manager) GetLatestSimulatorAndVersion(osName string, deviceName string) (simulator.Simulator, string, error) {
	ret := _m.Called(osName, deviceName)

	var r0 simulator.Simulator
	if rf, ok := ret.Get(0).(func(string, string) simulator.Simulator); ok {
		r0 = rf(osName, deviceName)
	} else {
		r0 = ret.Get(0).(simulator.Simulator)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(osName, deviceName)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(osName, deviceName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSimulator provides a mock function with given fields: osNameAndVersion, deviceName
func (_m *Manager) GetSimulator(osNameAndVersion string, deviceName string) (simulator.Simulator, error) {
	ret := _m.Called(osNameAndVersion, deviceName)

	var r0 simulator.Simulator
	if rf, ok := ret.Get(0).(func(string, string) simulator.Simulator); ok {
		r0 = rf(osNameAndVersion, deviceName)
	} else {
		r0 = ret.Get(0).(simulator.Simulator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(osNameAndVersion, deviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchSimulator provides a mock function with given fields: simulatorID
func (_m *Manager) LaunchSimulator(simulatorID string) error {
	ret := _m.Called(simulatorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(simulatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetLaunchServices provides a mock function with given fields:
func (_m *Manager) ResetLaunchServices() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulatorBoot provides a mock function with given fields: id
func (_m *Manager) SimulatorBoot(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulatorCollectDiagnostics provides a mock function with given fields:
func (_m *Manager) SimulatorCollectDiagnostics() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulatorDiagnosticsName provides a mock function with given fields:
func (_m *Manager) SimulatorDiagnosticsName() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimulatorEnableVerboseLog provides a mock function with given fields: id
func (_m *Manager) SimulatorEnableVerboseLog(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimulatorShutdown provides a mock function with given fields: id
func (_m *Manager) SimulatorShutdown(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
